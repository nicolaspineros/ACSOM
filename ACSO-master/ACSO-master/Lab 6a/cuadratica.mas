            input
            store       a
            input
            store       b
            input       
            store       c

            load        a
            skipcond    400
            jump        start
            load        one_neg
            jump        out

start,      clear                   /Calcular -b
            subt        b
            store       b_neg

            load        b           /Calcular b cuadrado
            store       mult_x
            store       mult_y
            jns         mult
            store       bsq

            load        four        /Calcular 4*a*c
            store       mult_x
            load        a
            store       mult_y
            jns         mult
            store       mult_x
            load        c
            store       mult_y
            jns         mult
            store       disc
            
            load        bsq         /Calcular discriminante
            subt        disc
            store       disc
            store       div_x
            load        ten
            store       div_y
            jns         div
            store       disc

            load        two         /Calcular 2*a
            store       mult_x
            load        a
            store       mult_y
            jns         mult
            store       twoa

            load        disc        /Verificar si el discriminante es negativo
            skipcond    000
            jump        checkzero
            load        one_neg
            jump        out

checkzero,  skipcond    400         /Verificar si el discriminante es cero
            jump        calcsqrt
            clear
            store       sqrtdisc
            jump        partTwo

calcsqrt,   store       sq_x        /Calcular la raiz del discriminante
            jns         sqroot
            store       sqrtdisc
            
            load        b_neg       /calcular la parte de suma
            add         sqrtdisc
            store       mult_x
            load        ten
            store       mult_y
            jns         mult
            store       div_x
            load        twoa
            store       div_y
            jns         div
            output

partTwo,    load        b_neg       /calcular la parte de resta
            subt        sqrtdisc
            store       mult_x
            load        ten
            store       mult_y
            jns         mult
            store       div_x
            load        twoa
            store       div_y
            jns         div
            output
            jump        end

out,        output
end,        halt

a,          dec         0
b,          dec         0
c,          dec         0

bsq,        dec         0
b_neg,      dec         0
disc,       dec         0
sqrtdisc,   dec         0
twoa,       dec         0

one_neg,    dec         -1
two,        dec         2
four,       dec         4
ten,        dec         10



sqroot,     dec         0
            load        sq_x
            store       mult_x
            load        sq_ten
            store       mult_y
            jns         mult
            store       sq_x
            skipcond    400
            jump        sq_eqone
            jumpi       sqroot
sq_eqone,   subt        sq_ten
            skipcond    400
            jump        sq_gen
            load        sq_x
            jumpi       sqroot
sq_gen,     load        sq_result
            subt        sq_x
            skipcond    000
            jump        sq_eqwh
            jump        sq_wh
sq_eqwh,    skipcond    400
            jump        sq_endwh
sq_wh,      load        sq_i
            add         sq_one
            store       sq_i
            store       mult_x
            store       mult_y
            jns         mult
            store       sq_result
            jump        sq_gen
sq_endwh,   load        sq_i
            subt        sq_one
            jumpi       sqroot

sq_one,     dec         1
sq_i,       dec         1
sq_result,  dec         1
sq_ten,     dec         10
sq_x,       dec         0



mult,       dec         0
            clear
            store       mult_i
            store       mult_sum
            store       mult_signo

            load        mult_x           /Check signos
            skipcond    000
            jump        m_second
            load        mult_signo
            add         mult_one
            store       mult_signo
m_second,   load        mult_y
            skipcond    000
            jump        m_start
            load        mult_signo
            add         mult_one
            store       mult_signo

m_start,    load        mult_x           /Convertirlos en positivos
            store       abs_x
            jns         abs
            store       mult_x
            load        mult_y
            store       abs_x
            jns         abs
            store       mult_y

            clear
            store       mult_sum
            store       mult_i
m_while,    subt        mult_y
            skipcond    000
            jump        m_endwhile
            load        mult_sum
            add         mult_x
            store       mult_sum
            load        mult_i
            add         mult_one
            store       mult_i
            jump        m_while

m_endwhile, load        mult_signo       /Verificar el signo final de la division
            skipcond    400
            jump        m_checktwo
            jump        m_return
m_checktwo, subt        mult_two
            skipcond    400
            jump        m_negate
            jump        m_return

m_negate,   clear
            subt        mult_sum
            store       mult_sum

m_return,   load		mult_sum
            jumpi       mult

mult_x,     dec         0
mult_y,     dec         0
mult_i,     dec         0
mult_sum,   dec         0
mult_signo, dec         0
mult_one,   dec         1
mult_two,   dec         2



div,		dec		    0
            clear
            store       div_result
            store       div_signo

            load        div_x           /Check signos
            skipcond    000
            jump        d_second
            load        div_signo
            add         div_one
            store       div_signo
d_second,   load        div_y
            skipcond    000
            jump        d_start
            load        div_signo
            add         div_one
            store       div_signo

d_start,    load        div_x           /Convertirlos en positivos
            store       abs_x
            jns         abs
            store       div_x
            load        div_y
            store       abs_x
            jns         abs
            store       div_y

            clear                       /Iniciar la division 
            store		div_result
            load		div_x
d_while,    subt		div_y
            skipcond	800
            jump		equals
operation,	store		div_x
            load		div_result
            add		    div_one
            store		div_result
            load		div_x
            jump		d_while
equals,		skipcond	400
            jump		d_endwhile
            jump		operation

d_endwhile,	load        div_signo       /Verificar el signo final de la division
            skipcond    400
            jump        d_checktwo
            jump        d_return
d_checktwo, subt        div_two
            skipcond    400
            jump        d_negate
            jump        d_return

d_negate,   clear
            subt        div_result
            store       div_result

d_return,   load		div_result
            jumpI		div
            
div_x,		dec		    0
div_y,		dec		    0
div_result,	dec		    0
div_signo,  dec         0
div_one,	dec		    1
div_two,    dec         2



abs,        dec         0
            load        abs_x
            skipcond    000
            jumpi       abs
            load        abs_res
            subt        abs_x
            jumpi       abs

abs_x,       dec         0
abs_res,     dec         0